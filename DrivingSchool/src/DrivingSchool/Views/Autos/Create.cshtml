@using DrivingSchool.Entities.Enumerations
@model CarCreationViewModel

@{
    ViewBag.Title += "New Vehical";
}

<div class="container">
    <div class="form-group">
        <button class="btn btn-default" onclick="location.href='@Url.Action("ViewCarList")'">
            <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>
            Back
        </button>
    </div>
    <form method="post">
        <div class="well well-sm">
            <h1>Vehicle's Info</h1>
            <fieldset>
                <div class="form-group">
                    @Html.LabelFor(m => m.LicensePlate)
                    @Html.TextBoxFor(m => m.LicensePlate, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.LicensePlate, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Brand)
                    @Html.TextBoxFor(m => m.Brand, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Brand, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Model)
                    @Html.TextBoxFor(m => m.Model, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Model, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ManufactureDate)
                    @Html.TextBoxFor(m => m.ManufactureDate, "{0:yyyy-MM-dd}", new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.ManufactureDate, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Mileage)
                    @Html.TextBoxFor(m => m.Mileage, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Mileage, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Gearbox)
                    @Html.DropDownListFor(m => m.Gearbox, Html.GetEnumSelectList(typeof(Gearbox)), new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Gearbox, "", new { @class = "text-danger" })
                </div>
            </fieldset>
        </div>
        <div class="well well-sm">
            <h2>Documents</h2>
            <fieldset>
                @Html.DropDownList("DocTypeBase", Html.GetEnumSelectList(typeof(DocumentType)), new { @class = "form-control hidden" })
                @if (Model.Documents != null && Model.Documents.Count != 0)
                {
                    for (var i = 0; i < Model.Documents.Count; i++)
                    {
                        <div class="form-group form-inline" id="documentDiv@(i)">
                            <label>Type</label>
                            @Html.DropDownListFor(m => m.Documents[i].Type, Html.GetEnumSelectList(typeof(DocumentType)), new { @class = "form-control" })
                            <label>Valid from</label>
                            @Html.TextBoxFor(m => m.Documents[i].StartDate, "{0:yyyy-MM-dd}", new { @class = "form-control" })
                            <label>Valid to</label>
                            @Html.TextBoxFor(m => m.Documents[i].EndDate, "{0:yyyy-MM-dd}", new { @class = "form-control" })
                            <input type="button" class="btn btn-danger" onclick="removeDocument(@i)" value="-">
                            @Html.ValidationMessageFor(m => m.Documents[i].Type, "", new { @class = "text-danger" })
                            @Html.ValidationMessageFor(m => m.Documents[i].StartDate, "", new { @class = "text-danger" })
                            @Html.ValidationMessageFor(m => m.Documents[i].EndDate, "", new { @class = "text-danger" })
                        </div>
                    }
                }
                <div class="form-group" id="docBtnDiv">
                    <button type="button" class="btn btn-success" onclick="addDocument()">+</button>
                </div>
            </fieldset>
        </div>
        <div class="well well-sm">
            <h2>Mileage Checkpoints</h2>
            <fieldset>
                @if (Model.MileagePoints != null && Model.MileagePoints.Count != 0)
                {
                    for (var i = 0; i < Model.MileagePoints.Count; i++)
                    {
                        <div class="form-group form-inline" id="checkpointDiv@(i)">
                            <label>Mileage</label>
                            @Html.TextBoxFor(m => m.MileagePoints[i].Mileage, new { @class = "form-control" })
                            <label>Message</label>
                            @Html.TextBoxFor(m => m.MileagePoints[i].Name, new { @class = "form-control" })
                            <input type="button" class="btn btn-danger" onclick="removeCheckpoint(@i)" value="-">
                            @Html.ValidationMessageFor(m => m.MileagePoints[i].Mileage, "", new { @class = "text-danger" })
                            @Html.ValidationMessageFor(m => m.MileagePoints[i].Name, "", new { @class = "text-danger" })
                        </div>
                    }
                }
                <div class="form-group" id="checkBtnDiv">
                    <button id="checkBtn" type="button" class="btn btn-success" onclick="addCheckpoint()">+</button>
                </div>
            </fieldset>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-default btn-lg">Create</button>
        </div>
    </form>
</div>
<script>
    function addCheckpoint() {
        var index = $("div[id^=checkpointDiv").length;
        var div = $(document.createElement("div")).attr("id", "checkpointDiv" + index).addClass("form-group").addClass("form-inline");
        var mileageLabel = $(document.createElement("label")).text("Mileage");
        var mileageInput = $(document.createElement("input")).attr("name", "MileagePoints[" + index + "].Mileage").attr("type", "text").addClass("form-control");
        var messageLabel = $(document.createElement("label")).text("Message");
        var messageInput = $(document.createElement("input")).attr("name", "MileagePoints[" + index + "].Name").attr("type", "text").addClass("form-control");
        var removeButton = $(document.createElement("input")).attr("type", "button").attr("onclick", "removeCheckpoint(" + index + ")").val("-").attr("class", "btn btn-danger");
        var errorForMileage = $(document.createElement("span")).attr("class", "field-validation-valid text-danger")
            .attr("data-valmsg-for", "MileagePoints[" + index + "].Mileage").attr("data-valmsg-replace", "true");
        var errorForMessage = errorForMileage.clone().attr("data-valmsg-for", "MileagePoints[" + index + "].Name");
        div.append(mileageLabel).append($("<i> </i>"))
            .append(mileageInput).append($("<i> </i>"))
            .append(messageLabel).append($("<i> </i>"))
            .append(messageInput).append($("<i> </i>"))
            .append(removeButton).append($("<i> </i>"))
            .append(errorForMileage).append($("<i> </i>"))
            .append(errorForMessage)
            .insertBefore($("#checkBtnDiv"));
    }

    function addDocument() {
        var index = $("div[id^=documentDiv").length;
        var div = $(document.createElement("div")).attr("id", "documentDiv" + index).addClass("form-group").addClass("form-inline");
        var dropdownLabel = $(document.createElement("label")).text("Type");
        var dropdown = $("#DocTypeBase").clone().attr("name", "Documents[" + index + "].Type").removeClass("hidden").removeAttr("id");
        var validFromLabel = $(document.createElement("label")).text("Valid from");
        var validFromInput = $(document.createElement("input")).attr("name", "Documents[" + index + "].StartDate").attr("type", "date").addClass("form-control");
        var validToLabel = $(document.createElement("label")).text("Valid To");
        var validToInput = $(document.createElement("input")).attr("name", "Documents[" + index + "].EndDate").attr("type", "date").addClass("form-control");
        var removeButton = $(document.createElement("input")).attr("type", "button").attr("onclick", "removeDocument(" + index + ")").val("-").attr("class", "btn btn-danger");
        var errorForType = $(document.createElement("span")).attr("class", "field-validation-valid text-danger")
            .attr("data-valmsg-for", "Documents[0].Type").attr("data-valmsg-replace", "true");
        var errorForStart = errorForType.clone().attr("data-valmsg-for", "Documents[0].StartDate");
        var errorForEnd = errorForType.clone().attr("data-valmsg-for", "Documents[0].EndDate");
        div.append(dropdownLabel).append($("<i> </i>"))
            .append(dropdown).append($("<i> </i>"))
            .append(validFromLabel).append($("<i> </i>"))
            .append(validFromInput).append($("<i> </i>"))
            .append(validToLabel).append($("<i> </i>"))
            .append(validToInput).append($("<i> </i>"))
            .append(removeButton).append($("<i> </i>"))
            .append(errorForType).append($("<i> </i>"))
            .append(errorForStart).append($("<i> </i>"))
            .append(errorForEnd)
            .insertBefore($("#docBtnDiv"));
    }

    function removeCheckpoint(index) {
        $("#checkpointDiv" + index).remove();
        $("div[id^=checkpointDiv").each(function (i) {
            $(this).attr("id", "checkpointDiv" + i)
                .children("input").each(function () {
                    if ($(this).attr("type") === "text" || $(this).attr("type") === "date") {
                        var currentName = $(this).attr("name");
                        var newName = "MileagePoints[" + i + "]" + currentName.split("]")[1];
                        $(this).attr("name", newName);
                    }
                    if ($(this).attr("type") === "button") {
                        $(this).attr("onclick", "removeCheckpoint(" + i + ")");
                    }
                });
        });
    }

    function removeDocument(index) {
        $("#documentDiv" + index).remove();
        $("div[id^=documentDiv").each(function (i) {
            $(this).attr("id", "documentDiv" + i)
                .children("input").each(function () {
                    if ($(this).attr("type") === "date") {
                        var currentName = $(this).attr("name");
                        var newName = "Documents[" + i + "]" + currentName.split("]")[1];
                        $(this).attr("name", newName);
                    }
                    if ($(this).attr("type") === "button") {
                        $(this).attr("onclick", "removeDocument(" + i + ")");
                    }
                })
                .children("select").each(function () {
                    var currentName = $(this).attr("name");
                    var newName = "Documents[" + i + "]" + currentName.split("]")[1];
                    $(this).attr("name", newName);
                });
        });
    }
</script>